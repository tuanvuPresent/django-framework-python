"""
Django settings for Example project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import datetime
import os

from decouple import Config, RepositoryEnv, config

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ENV_FILE = os.path.join(BASE_DIR, '.env')
env_config = Config(RepositoryEnv(ENV_FILE))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'a5aj@zcwqzqkf1kc^p*xkevbzk(#y8231*w5hbcq=k#t8qu^ha'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_config("DEBUG", True),

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'apps.book',
    'apps.authentication_jwt',
    'apps.exams',
    'apps.sendmail',
    'apps.authentication',
    'apps.timesheet',
    'apps.exportfile',
    'apps.questions',
    'apps.upfile',
    'apps.common',
    'apps.todos',
    'apps.account',
    'apps.shops',
    'apps.demo_firebase',
    'apps.chatbot',
    'apps.my_phone_verify',

    'rest_framework.authtoken',
    'silk',
    'drf_yasg',
    'corsheaders',
    'django_crontab',
    'rest_framework',
    'django_celery_beat',
    'django_celery_results',
    'social_django',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',

    'silk.middleware.SilkyMiddleware',
]
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_REGEX_WHITELIST = [
    'http://localhost:3030',
]
ROOT_URLCONF = 'Example.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Example.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# config data-base postgres
# DATABASES = {
#     "default": {
#         "ENGINE": env_config("POSTGRES_ENGINE", "django.db.backends.sqlite3"),
#         "NAME": env_config("POSTGRES_DB", os.path.join(BASE_DIR, "db.sqlite3")),
#         "USER": env_config("POSTGRES_USER", "admin"),
#         "PASSWORD": env_config("POSTGRES_PASSWORD", "admin"),
#         "HOST": env_config("POSTGRES_HOST", "localhost"),
#         "PORT": env_config("POSTGRES_PORT", "5432"),
#     }
# }

# config data-base mysql
DATABASES = {
    'default': {
        'ENGINE': env_config("MY_SQL_ENGINE", "django.db.backends.sqlite3"),
        'NAME': env_config("MYSQL_DATABASE", "db"),
        'USER': env_config("MYSQL_USER", "admin"),
        'PASSWORD': env_config("MYSQL_PASSWORD", "admin"),
        'HOST': env_config("MY_SQL_HOST", "127.0.0.1"),
        'PORT': env_config("MYSQL_PORT", "3306"),
        # 'OPTIONS': {
        #     'init_command':
        #         'ALTER DATABASE {} CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_as_cs'.format(
        #             env_config("MYSQL_DATABASE", "db"))
        # }
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = env_config('LANGUAGE_CODE')

TIME_ZONE = env_config('TIME_ZONE')

USE_I18N = True

USE_L10N = False

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

TEMP_URL = '/temp/'
STATIC_URL = '/staticfiles/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/mediafiles/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER':
        'apps.common.custom_exception_handler.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'apps.common.custom_authentication.ExpiringTokenAuthentication'
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '12/min',
        'shops.request': '6/min',
        'upload': '3/min',
        'exams.request': '10/min',
        'config_exams.request': '12/min',
        'do_exams': '12/min',
    }
}
AUTH_USER_MODEL = 'account.User'
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {

        "Token": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
    },
}

EXPIRING_TOKEN_DURATION = datetime.timedelta(days=1)
EMAIL_HOST = env_config('EMAIL_HOST')
EMAIL_BACKEND = env_config('EMAIL_BACKEND')
EMAIL_PORT = env_config('EMAIL_PORT')
EMAIL_HOST_USER = env_config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env_config('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = env_config('EMAIL_USE_TLS')

FORMAT_DATE = '%Y/%m/%d'
FORMAT_DATETIME = '%Y/%m/%d %X'

X_CHATWORKTOKEN = env_config('X_CHATWORKTOKEN')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
    }
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'apps.common.authentication_backend.SettingsBackend',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.github.GithubOAuth2',
]

# config redis - celery
# BROKER_URL = 'redis://redis:6379'
# CELERY_RESULT_BACKEND = 'redis://redis:6379'
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'

# config rabbitmq - celery
BROKER_URL = "amqp://rabbitmq:5672//"
CELERY_RESULT_BACKEND = 'amqp://rabbitmq:5672//'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env_config('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env_config('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

SOCIAL_AUTH_FACEBOOK_KEY = env_config('SOCIAL_AUTH_FACEBOOK_KEY')
SOCIAL_AUTH_FACEBOOK_SECRET = env_config('SOCIAL_AUTH_FACEBOOK_SECRET')

PHONE_VERIFICATION = {
    "BACKEND": "phone_verify.backends.twilio.TwilioBackend",
    "OPTIONS": {
        "SID": env_config('SID_PHONE'),
        "SECRET": env_config('SECRET_PHONE'),
        "FROM": env_config('FROM_PHONE'),
    },
    "TOKEN_LENGTH": 6,
    "MESSAGE": "Welcome to {app}! Please use security code {security_code} to proceed.",
    "APP_NAME": "Phone Verify",
    "SECURITY_CODE_EXPIRATION_TIME": 60,
    "VERIFY_SECURITY_CODE_ONLY_ONCE": True,
}

JWT_AUTH = {
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=300),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,

    'JWT_ALLOW_REFRESH': True,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=1),

    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_AUTH_COOKIE': 'JWT',
}
